{"ast":null,"code":"var _jsxFileName = \"/Users/ilo.molashxia/Desktop/07.homework/counterReactApp/src/App.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext } from 'react';\n\n// Create a context for the theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the theme context\nconst useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// Component for managing the theme state and providing it to the context\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // useEffect to save the theme preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('isDarkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n\n  // Function to toggle between dark mode and light mode\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Retrieve the theme preference from localStorage on component mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('isDarkMode');\n    setIsDarkMode(savedTheme ? JSON.parse(savedTheme) : false);\n  }, []);\n\n  // Use the ThemeContext.Provider to provide the theme state and toggle function to its children\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n// Your App component that uses the ThemeProvider\n_s2(ThemeProvider, \"jZSDCHM8qUYa7sOOCe+CR2toAGQ=\");\n_c = ThemeProvider;\nconst App = () => {\n  _s3();\n  // Use the useTheme hook to access the theme context\n  const {\n    isDarkMode,\n    toggleTheme\n  } = useTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isDarkMode ? 'dark-theme' : 'light-theme',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Number: \", number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleIncrement,\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDecrement,\n      disabled: number === 0,\n      children: \"Decrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTheme,\n      children: \"Toggle Theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s3(App, \"MY/fJVj7pNG84xK2IRXuobEs7Rg=\", false, function () {\n  return [useTheme];\n});\n_c2 = App;\nexport { App };\nvar _c, _c2;\n$RefreshReg$(_c, \"ThemeProvider\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","isDarkMode","setIsDarkMode","localStorage","setItem","JSON","stringify","toggleTheme","prevMode","savedTheme","getItem","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s3","className","number","onClick","handleIncrement","handleDecrement","disabled","_c2","$RefreshReg$"],"sources":["/Users/ilo.molashxia/Desktop/07.homework/counterReactApp/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n\n// Create a context for the theme\nconst ThemeContext = createContext();\n\n// Create a custom hook to use the theme context\nconst useTheme = () => {\n  return useContext(ThemeContext);\n};\n\n// Component for managing the theme state and providing it to the context\nconst ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // useEffect to save the theme preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('isDarkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n\n  // Function to toggle between dark mode and light mode\n  const toggleTheme = () => {\n    setIsDarkMode((prevMode) => !prevMode);\n  };\n\n  // Retrieve the theme preference from localStorage on component mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('isDarkMode');\n    setIsDarkMode(savedTheme ? JSON.parse(savedTheme) : false);\n  }, []);\n\n  // Use the ThemeContext.Provider to provide the theme state and toggle function to its children\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Your App component that uses the ThemeProvider\nconst App = () => {\n  // Use the useTheme hook to access the theme context\n  const { isDarkMode, toggleTheme } = useTheme();\n\n  return (\n    <div className={isDarkMode ? 'dark-theme' : 'light-theme'}>\n      <h1>Number: {number}</h1>\n      <button onClick={handleIncrement}>Increment</button>\n      <button onClick={handleDecrement} disabled={number === 0}>\n        Decrement\n      </button>\n      <button onClick={toggleTheme}>Toggle Theme</button>\n    </div>\n  );\n};\n\n\n\nexport {App};"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGJ,aAAa,CAAC,CAAC;;AAEpC;AACA,MAAMK,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,OAAOL,UAAU,CAACG,YAAY,CAAC;AACjC,CAAC;;AAED;AAAAE,EAAA,CAJMD,QAAQ;AAKd,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACda,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,CAAC,CAAC;EAChE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxBL,aAAa,CAAEM,QAAQ,IAAK,CAACA,QAAQ,CAAC;EACxC,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACd,MAAMmB,UAAU,GAAGN,YAAY,CAACO,OAAO,CAAC,YAAY,CAAC;IACrDR,aAAa,CAACO,UAAU,GAAGJ,IAAI,CAACM,KAAK,CAACF,UAAU,CAAC,GAAG,KAAK,CAAC;EAC5D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEf,OAAA,CAACC,YAAY,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,UAAU;MAAEM;IAAY,CAAE;IAAAR,QAAA,EACvDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAjB,GAAA,CA3BMF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AA4BnB,MAAMqB,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChB;EACA,MAAM;IAAEnB,UAAU;IAAEM;EAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAE9C,oBACEF,OAAA;IAAK2B,SAAS,EAAEpB,UAAU,GAAG,YAAY,GAAG,aAAc;IAAAF,QAAA,gBACxDL,OAAA;MAAAK,QAAA,GAAI,UAAQ,EAACuB,MAAM;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzBvB,OAAA;MAAQ6B,OAAO,EAAEC,eAAgB;MAAAzB,QAAA,EAAC;IAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpDvB,OAAA;MAAQ6B,OAAO,EAAEE,eAAgB;MAACC,QAAQ,EAAEJ,MAAM,KAAK,CAAE;MAAAvB,QAAA,EAAC;IAE1D;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA;MAAQ6B,OAAO,EAAEhB,WAAY;MAAAR,QAAA,EAAC;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAACG,GAAA,CAdID,GAAG;EAAA,QAE6BvB,QAAQ;AAAA;AAAA+B,GAAA,GAFxCR,GAAG;AAkBT,SAAQA,GAAG;AAAE,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}